# reusable workflow
name: .build

on:
  workflow_call:
    inputs:
      name:
        required: true
        type: string
      envs:
        required: false
        type: string

env:
  BUILD_CACHE_REGISTRY_SLUG: dockereng/packaging-cache
  GHA_DEFAULT_MATRIX: minimal

jobs:
  prepare:
    runs-on: ubuntu-20.04
    outputs:
      pkgs: ${{ steps.set.outputs.pkgs }}
      fail-fast: ${{ steps.set.outputs.fail-fast }}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Set outputs
        id: set
        run: |
          ghamatrix=$GHA_DEFAULT_MATRIX
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            ghamatrix=${{ inputs.pkgs }}
          fi
          pkgs=$(make gha-matrix GHA_MATRIX=$ghamatrix)
          echo "pkgs=$pkgs" >> $GITHUB_OUTPUT
          if [ "${{ inputs.fail-fast }}" != "" ]; then
            failfast=${{ inputs.fail-fast }}
          else
            failfast=true
          fi
          echo "fail-fast=$failfast" >> $GITHUB_OUTPUT
      -
        name: Show outputs
        run: |
          echo pkgs=${{ steps.set.outputs.pkgs }}
          echo fail-fast=${{ steps.set.outputs.fail-fast }}

  build:
    runs-on: ubuntu-20.04
    needs:
      - prepare
    strategy:
      fail-fast: ${{ needs.prepare.outputs.fail-fast == 'true' }}
      matrix:
        pkg: ${{ fromJson(needs.prepare.outputs.pkgs) }}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Environment variables
        run: |
          for l in "${{ inputs.envs }}"; do
            echo "${l?}" >> $GITHUB_ENV
          done
      -
        name: Prepare
        run: |
          # Push cache to regitry only on main (secrets not available from fork)
          # and not on workflow_dispatch event
          if [ "${{ github.ref }}" = "refs/heads/main" ] && [ "${{ github.event_name }}" != "workflow_dispatch" ]; then
            echo "BUILD_CACHE_REGISTRY_PUSH=1" >> $GITHUB_ENV
          fi
          # Limit to local platform for pkgs other than static for performance
          # reasons. See common/vars.mk and common/build.mk for more info on
          # filtered platforms
          if [ "${{ matrix.pkg }}" != "static" ]; then
            echo "LOCAL_PLATFORM=1" >> $GITHUB_ENV
          fi
      -
        name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERPUBLICBOT_USERNAME }}
          password: ${{ secrets.DOCKERPUBLICBOT_WRITE_PAT }}
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: latest
      -
        name: Build
        run: |
          make -C pkg/${{ inputs.name }} run-pkg-${{ matrix.pkg }}
      -
        name: List artifacts
        run: |
          tree -nh ./pkg/${{ inputs.name }}/bin
      -
        name: Verify
        run: |
          make -C pkg/${{ inputs.name }} run-verify-${{ matrix.pkg }}
      -
        name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.name }}
          path: ./pkg/${{ inputs.name }}/bin/*
          if-no-files-found: error
          retention-days: 1

  dummy-release:
    runs-on: ubuntu-20.04
    needs:
      - build
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Environment variables
        run: |
          for l in "${{ inputs.envs }}"; do
            echo "${l?}" >> $GITHUB_ENV
          done
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: latest
      -
        name: Download binaries
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.name }}
          path: ./pkg/${{ inputs.name }}/bin
      -
        name: Generate metadata
        run: |
          make -C pkg/${{ inputs.name }} metadata
      -
        name: Summary
        run: |
          for l in $(cat ./pkg/${{ inputs.name }}/bin/metadata.env); do
            export "${l?}"
          done
          
          cat >> "$GITHUB_STEP_SUMMARY" <<-EOF
          * repo: ${REPO}
          * ref: \`${REF}\`
          * version: \`${VERSION}\`
          * commit: [\`${COMMIT}\`](${REPO}/commit/${COMMIT})
          EOF
          
          if [ "${{ inputs.name }}" = "containerd" ]; then
            cat >> "$GITHUB_STEP_SUMMARY" <<-EOF
          * runc
            * repo: ${RUNC_REPO}
            * ref: \`${RUNC_REF}\`
            * version: \`${RUNC_VERSION}\`
            * commit: [\`${RUNC_COMMIT}\`](${RUNC_REPO}/commit/${RUNC_COMMIT})
          EOF
          fi
          
          cat >> "$GITHUB_STEP_SUMMARY" <<-EOF
          * packages: \`$(find ./pkg/${{ inputs.name }}/bin -type f | wc -l)\` files
          * size: \`$(du -sh ./pkg/${{ inputs.name }}/bin | awk '{print $1}')\`
          EOF
      -
        name: Release
        uses: docker/bake-action@v2
        with:
          workdir: ./pkg/${{ inputs.name }}
          targets: release
          set: |
            *.output=/tmp/release
      -
        name: List release artifacts
        run: |
          tree /tmp/release
